!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=t.props||{},r=n.props||{};Object.keys(o).forEach((function(t){var n=o[t],l=r[t];if(n!==l)if("on"===t.slice(0,2)){var i=t.toLowerCase().slice(2);e.addEventListener(i,n),l&&e.removeEventListener(i,l)}else"value"===t||"checked"===t?e[t]=n:"children"!==t&&("className"===t?e.setAttribute("class",n):e.setAttribute(t,n))})),Object.keys(r).forEach((function(t){var n=o[t],l=r[t];if(!n)if("on"===t.slice(0,2)){var i=t.toLowerCase().slice(2);e.removeEventListener(i,l)}else"children"!==t&&e.removeAttribute(t)}))}function r(e){var t=null;return"text"===e.type?t=document.createTextNode(e.props.textContent):o(t=document.createElement(e.type),e),t._virtualDOM=e,e.children.forEach((function(e){a(e,t)})),e.props&&e.props.ref&&e.props.ref(t),t}function l(e){var t=e._virtualDOM;if("text"!==t.type){var n=t.component;if(n&&n.componentWillUnmount(),t.props&&t.props.ref&&t.props.ref(null),Object.keys(t.props).forEach((function(n){if("on"===n.slice(0,2)){var o=n.toLowerCase().slice(0,2),r=t.props[n];e.removeEventListener(o,r)}})),e.childNodes.length>0)for(var o=0;o<e.childNodes.length;o++)l(e.childNodes[o]),o--;e.remove()}else e.remove()}function i(e,t,n){var o=r(e);n?t.insertBefore(o,n):t.appendChild(o);var l=e.component;l&&l.setDOM(o)}function c(e){return e&&"function"==typeof e.type}function u(e,t,n){var o=null,r=null;!function(e){var t=e.type;return t&&c(e)&&!(t.prototype&&t.prototype.render)}(e)?(o=function(e){var t=new e.type(e.props||{}),n=t.render();return n.component=t,n}(e),(r=o.component).componentWillMount()):o=function(e){return e.type(e.props||{})}(e),c(o)?u(o,t,n):i(o,t,n),r&&(r.componentDidMount(),r.props&&r.props.ref&&r.props.ref(r))}function a(e,t,n){c(e)?u(e,t,n):i(e,t,n)}function p(e,t,n,o){!function(e,t){return t&&e.type===t.constructor}(e,t)?a(e,o,n):function(e,t,n,o){if(t.componentWillReceiveProps(e.props),t.shouldComponentUpdate(e.props)){var r=t.props;t.componentWillUpdate(e.props),t.updateProps(e.props);var l=t.render();l.component=t,f(l,o,n),t.componentDidUpdate(r)}}(e,t,n,o)}function f(e,t,n){var i=n&&n._virtualDOM,c=i&&i.component;if(n){if(e.type!==i.type&&"function"!=typeof e.type){var u=r(e);n.parentNode.replaceChild(u,n)}else if("function"==typeof e.type)p(e,c,n,t);else if(i&&e.type===i.type){"text"===e.type?function(e,t,n){e.props.textContent!==t.props.textContent&&(n.textContent=e.props.textContent,n._virtualDOM=e)}(e,i,n):o(n,e,i);for(var s={},d=0,v=n.childNodes.length;d<v;d++){var y=n.childNodes[d];if(1===y.nodeType){var m=y.getAttribute("key");m&&(s[m]=y)}}var h=0===Object.keys(s).length;h?e.children.forEach((function(e,t){f(e,n,n.childNodes[t])})):e.children.forEach((function(e,t){var o=e.props.key;if(o){var r=s[o];r?n.childNodes[t]&&n.childNodes[t]!==r&&n.insertBefore(r,n.childNodes[t]):a(e,n,n.childNodes[t])}}));var b=n.childNodes;if(b.length>e.children.length)if(h)for(var E=b.length-1;E>e.children.length-1;E--)l(b[E]);else{for(var g=0;g<e.children.length;g++){var k=e.children[g].props.key;s[k]&&delete s[k]}Object.keys(s).forEach((function(e){l(s[e])}))}}}else a(e,t)}function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var d={createElement:function e(t,n){for(var o,r=arguments.length,l=new Array(r>2?r-2:0),i=2;i<r;i++)l[i-2]=arguments[i];var c=(o=[]).concat.apply(o,l).reduce((function(t,n){return!1!==n&&!0!==n&&null!==n&&(n instanceof Object?t.push(n):t.push(e("text",{textContent:n}))),t}),[]);return{type:t,props:Object.assign({children:c},n),children:c}},render:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.firstChild;f(e,t,n)},Component:function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.props=t}var t,n,o;return t=e,(n=[{key:"setState",value:function(e){this.state=Object.assign({},this.state,e);var t=this.render(),n=this.getDOM();f(t,n.parentNode,n)}},{key:"setDOM",value:function(e){this._dom=e}},{key:"getDOM",value:function(){return this._dom}},{key:"updateProps",value:function(e){this.props=e}},{key:"componentWillMount",value:function(){}},{key:"componentDidMount",value:function(){}},{key:"componentWillReceiveProps",value:function(e){}},{key:"shouldComponentUpdate",value:function(e,t){return e!=this.props||t!=this.state}},{key:"componentWillUpdate",value:function(e,t){}},{key:"componentDidUpdate",value:function(e,t){}},{key:"componentWillUnmount",value:function(){}}])&&s(t.prototype,n),o&&s(t,o),e}()};function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function h(e,t,n){return t&&m(e.prototype,t),n&&m(e,n),e}function b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=C(e);if(t){var r=C(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?O(e):t}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=document.getElementById("root");d.createElement("div",{className:"container"},d.createElement("h1",null,"你好 Tiny React"),d.createElement("h2",{"data-test":"test"},"(编码必杀技)"),d.createElement("div",null,"嵌套1 ",d.createElement("div",null,"嵌套 1.1")),d.createElement("h3",null,"(观察: 这个将会被改变)"),!1,d.createElement("div",null,"2"),d.createElement("span",null,"这是一段内容"),d.createElement("button",{onClick:function(){return alert("你好")}},"点击我"),d.createElement("h3",null,"这个将会被删除"),"2, 3",d.createElement("input",{type:"text",value:"13"})),d.createElement("div",{className:"container"},d.createElement("h1",null,"你好 Tiny React"),d.createElement("h2",{"data-test":"test123"},"(编码必杀技)"),d.createElement("div",null,"嵌套1 ",d.createElement("div",null,"嵌套 1.1")),d.createElement("h3",null,"(观察: 这个将会被改变)"),!1,d.createElement("div",null,"2"),d.createElement("button",{onClick:function(){return alert("你好!!!!!")}},"点击我"),d.createElement("input",{type:"text",value:"13"}));function x(){return d.createElement("div",null,"Hello")}function _(e){return d.createElement("div",null,e.title,"♥ ",d.createElement(x,null))}d.createElement(_,{title:"Hello React11"}),setTimeout((function(){d.render(d.createElement(_,{title:"Hello React22"}),j)}),2e3);var P=function(e){b(n,e);var t=g(n);function n(e){var o;return y(this,n),(o=t.call(this,e)).state={title:"Default Title"},o.handleClick=o.handleClick.bind(O(o)),o}return h(n,[{key:"handleClick",value:function(){this.setState({title:"Changed Title"})}},{key:"componentWillReceiveProps",value:function(e){console.log("componentWillReceiveProps")}},{key:"componentWillUpdate",value:function(){console.log("componentWillUpdate")}},{key:"componentDidUpdate",value:function(){console.log("componentDidUpdate")}},{key:"render",value:function(){return d.createElement("div",null,this.props.name,this.props.age,d.createElement("div",null,this.state.title,d.createElement("button",{onClick:this.handleClick},"改变Title")))}}]),n}(d.Component);d.Component,d.Component}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,